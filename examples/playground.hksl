(1 + 2.5 - 3.) / (4 * -(-4 + 5)== 5);
2 + 3;
5;
a = b = 3;
let x = 2;
let y;
let z;
let x = 1 - a == 3;

fn foo() {}

fn bar(x: float) {
    let y = 2;
    let z: float = y + 3;
    let w;
}

fn mul(x: float, y: float1) -> float {
    let z = 2;
    x = z * 2;
    y = 5;

    if x == 2 {
        print(y);
    }

    if y + 5 == 3 {
        bar();
    } else {
        let q;
        q = 2 == 4;
    }

    if y - -5 == 3 {
        bar();
    } else if 2 + 3 == 5 {
        q = 2 == 4;
    } else {
        print(no);
    }



    return 5;
}




let x: float = 2;
let y = x; // y: float; based on typeof(x) being float


let x = 2; // x: float; based on the rhs being constant 2
let y = x; // y: float; based on typeof(x) being float

let x;
let y = x; // y: typeof(x)
y = vec2(0.2, 0.2) + y;

x = y; // x: typeof(y)
